/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_PB_NFC_PB_H_INCLUDED
#define PB_PB_NFC_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _PB_anticollisionType {
    PB_anticollisionType_NONE = 0,
    PB_anticollisionType_NFCA = 1,
    PB_anticollisionType_NFCB = 2,
    PB_anticollisionType_NFCBPrime = 3,
    PB_anticollisionType_NFCF = 4,
    PB_anticollisionType_NFCV = 5
} PB_anticollisionType;

/* Struct definitions */
typedef struct _PB_NfcAnticollisionRequest {
    PB_anticollisionType type;
} PB_NfcAnticollisionRequest;

typedef PB_BYTES_ARRAY_T(10) PB_NfcAAnticollisionResponse_uid_t;
typedef PB_BYTES_ARRAY_T(1) PB_NfcAAnticollisionResponse_sak_t;
typedef PB_BYTES_ARRAY_T(2) PB_NfcAAnticollisionResponse_atqa_t;
typedef struct _PB_NfcAAnticollisionResponse {
    bool ok;
    PB_NfcAAnticollisionResponse_uid_t uid;
    PB_NfcAAnticollisionResponse_sak_t sak;
    PB_NfcAAnticollisionResponse_atqa_t atqa;
    uint32_t uid_len;
} PB_NfcAAnticollisionResponse;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _PB_anticollisionType_MIN PB_anticollisionType_NONE
#define _PB_anticollisionType_MAX PB_anticollisionType_NFCV
#define _PB_anticollisionType_ARRAYSIZE ((PB_anticollisionType)(PB_anticollisionType_NFCV+1))

#define PB_NfcAnticollisionRequest_type_ENUMTYPE PB_anticollisionType



/* Initializer values for message structs */
#define PB_NfcAnticollisionRequest_init_default  {_PB_anticollisionType_MIN}
#define PB_NfcAAnticollisionResponse_init_default {0, {0, {0}}, {0, {0}}, {0, {0}}, 0}
#define PB_NfcAnticollisionRequest_init_zero     {_PB_anticollisionType_MIN}
#define PB_NfcAAnticollisionResponse_init_zero   {0, {0, {0}}, {0, {0}}, {0, {0}}, 0}

/* Field tags (for use in manual encoding/decoding) */
#define PB_NfcAnticollisionRequest_type_tag      1
#define PB_NfcAAnticollisionResponse_ok_tag      1
#define PB_NfcAAnticollisionResponse_uid_tag     2
#define PB_NfcAAnticollisionResponse_sak_tag     3
#define PB_NfcAAnticollisionResponse_atqa_tag    4
#define PB_NfcAAnticollisionResponse_uid_len_tag 5

/* Struct field encoding specification for nanopb */
#define PB_NfcAnticollisionRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1)
#define PB_NfcAnticollisionRequest_CALLBACK NULL
#define PB_NfcAnticollisionRequest_DEFAULT NULL

#define PB_NfcAAnticollisionResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     ok,                1) \
X(a, STATIC,   SINGULAR, BYTES,    uid,               2) \
X(a, STATIC,   SINGULAR, BYTES,    sak,               3) \
X(a, STATIC,   SINGULAR, BYTES,    atqa,              4) \
X(a, STATIC,   SINGULAR, UINT32,   uid_len,           5)
#define PB_NfcAAnticollisionResponse_CALLBACK NULL
#define PB_NfcAAnticollisionResponse_DEFAULT NULL

extern const pb_msgdesc_t PB_NfcAnticollisionRequest_msg;
extern const pb_msgdesc_t PB_NfcAAnticollisionResponse_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define PB_NfcAnticollisionRequest_fields &PB_NfcAnticollisionRequest_msg
#define PB_NfcAAnticollisionResponse_fields &PB_NfcAAnticollisionResponse_msg

/* Maximum encoded size of messages (where known) */
#define PB_NfcAAnticollisionResponse_size        27
#define PB_NfcAnticollisionRequest_size          2

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
